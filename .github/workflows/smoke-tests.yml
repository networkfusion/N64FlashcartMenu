name: Run ROM Smoke Tests

on:
  workflow_call:
    secrets:
      token:
        description: 'A github token passed from the caller workflow'
        required: true

jobs:

  ROM-Smoke-Tests-Ares-Windows:
    name: Ares Emulator Smoke tests
    runs-on: windows-latest

    # Run each ROM using on ares emulator.
    strategy:
      fail-fast: false
      matrix:
        include: [
          { rom-name: N64FlashcartMenu, ares-ci-compatible: true,  rom-path: output },
        ]

    env:
      Delay_Time_Seconds: 15
      Enable_Screenshot: 'yes' # 'no' by default.
      Ares_version: v133 # NOTE: this script is currently broken on Ares v132 and later. In future, possibily best to target latest or nightly.

    steps:

      - name: Download ROM artifact
        id: download-rom-artifact
        uses: actions/download-artifact@v3
        with:
          name: N64FlashcartMenu
          path: ${{ runner.temp }}/roms
        continue-on-error: true

      # - name: Show ROM Paths # helps with creating new matrix paths
      #   run: |
      #     cd ${{ runner.temp }}/roms
      #     ls -R
      #   continue-on-error: true

      - name: Install ares emulator
        if: ${{ matrix.ares-ci-compatible }}
        run: |
          Write-Output "Installing ares emulator!"
          curl -LO https://github.com/ares-emulator/ares/releases/download/${{ env.Ares_version }}/ares-windows.zip
          unzip ares-windows.zip
          rd -r ./ares-windows.zip
        continue-on-error: true

      - name: Setup Ares for CI
        if: ${{ matrix.ares-ci-compatible }}
        run: |
          # . ares-${{ env.Ares_version }}/ares --dump-all-settings
          # . ares-${{ env.Ares_version }}/ares --setting 'Video/Driver'='Direct3D 9.0'
          # . ares-${{ env.Ares_version }}/ares --setting 'Video/DisableVideoInterfaceProcessing'='true'
          # . ares-${{ env.Ares_version }}/ares --setting 'Audio/Driver'='None'

      - name: Run ROM in Ares for logs
        if: ${{ matrix.ares-ci-compatible }}
        run: |
          Start-Process -FilePath "ares-${{ env.Ares_version }}/ares" `
          -ArgumentList "${{ runner.temp }}/roms/${{ matrix.rom-path }}/${{ matrix.rom-name }}.n64" `
          -RedirectStandardOutput ${{ matrix.rom-name }}-${{ env.Delay_Time_Seconds }}s-ares-output-log.txt
          
          Start-Sleep -Seconds ${{ env.Delay_Time_Seconds }}
          
          # the emulator is still running! we need to stop it.
          Stop-Process -Name "ares"
          # Add a delay to make sure that the process has been closed.
          Start-Sleep -Seconds 1
          if ((get-item "${{ matrix.rom-name }}-${{ env.Delay_Time_Seconds }}s-ares-output-log.txt").Length -gt 0)
          {
            Write-Warning "Log File is not empty!"
            Write-Verbose "Or match it against a golden copy to see if it is expected."
            Write-Output "Enable_Screenshot=yes" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
            # appending to CI summary info!
            Write-Output ":warning: You might want to check: ${{ matrix.rom-name }}.n64 for issues!" | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          }
          else
          {
            Write-Output "File is empty, trying to remove it."
            remove-item -fo ${{ matrix.rom-name }}-${{ env.Delay_Time_Seconds }}s-ares-output-log.txt -ErrorAction Ignore
          }
        continue-on-error: true

      - name: Upload files
        if: ${{ matrix.ares-ci-compatible }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.rom-name }}-${{ env.Delay_Time_Seconds }}s-ares-output-log.txt
          if-no-files-found: ignore
          path: |
            ${{ matrix.rom-name }}-${{ env.Delay_Time_Seconds }}s-ares-output-log.txt
        continue-on-error: true

      - name: Run ROM in Ares for screenshot
        if: ${{ env.Enable_Screenshot == 'yes' }} && ${{ matrix.ares-ci-compatible }}
        run: |
          Start-Process -FilePath "ares-${{ env.Ares_version }}/ares" `
          -ArgumentList "${{ runner.temp }}/roms/${{ matrix.rom-path }}/${{ matrix.rom-name }}.n64 `
          --setting 'Video/Driver'='Direct3D 9.0' `
          --setting 'Video/DisableVideoInterfaceProcessing'='true' `
          --setting 'Audio/Driver'='None' `
          --fullscreen"
          Start-Sleep -Seconds ${{ env.Delay_Time_Seconds }}
        continue-on-error: true

      - name: Take screenshot
        if: ${{ env.Enable_Screenshot == 'yes' }} && ${{ matrix.ares-ci-compatible }}
        uses: networkfusion/desktop-screenshot-action@0.2
        with:
          file-name: '${{ matrix.rom-name }}-emu-screenshot_${{ env.Delay_Time_Seconds }}s.jpg'

      - name: Cleanup ares process
        if: ${{ env.Enable_Screenshot == 'yes' }} && ${{ matrix.ares-ci-compatible }}
        run: |
          Stop-Process -Name "ares"
        continue-on-error: true
